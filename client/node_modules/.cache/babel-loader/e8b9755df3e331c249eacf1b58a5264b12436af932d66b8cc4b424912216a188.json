{"ast":null,"code":"var _jsxFileName = \"/Users/alessioprato/Desktop/SELFIE/client/src/NotePage.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { SERVER_API } from \"./params/params\";\nimport { ResponseStatus } from \"./types/ResponseStatus\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseNote = {\n  id: \"\",\n  title: \"\",\n  text: \"\",\n  owner: \"\",\n  tags: []\n};\nconst NEW = \"new\";\nexport default function NotePage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [note, setNote] = React.useState(baseNote);\n  const [tag, setTag] = React.useState(\"\");\n  const [message, setMessage] = React.useState(\"\");\n  const nav = useNavigate();\n\n  // On page load, get the note for the user\n  React.useEffect(() => {\n    if (id !== NEW) fetch(`${SERVER_API}/notes/${id}`).then(res => res.json()).then(data => {\n      if (data.status === ResponseStatus.GOOD) {\n        setNote(data.value);\n        console.log(data.value);\n      } else {\n        nav(\"/notes\");\n      }\n    }).catch(() => {\n      setMessage(\"Impossibile raggiungere il server\");\n      nav(\"/notes\");\n    });\n  }, [id]);\n  function handleChange(e) {\n    setNote({\n      ...note,\n      [e.target.name]: e.target.value\n    });\n  }\n  async function handleCreate(e) {\n    e.preventDefault();\n    try {\n      const res = await fetch(`${SERVER_API}/notes`, {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const resBody = await res.json();\n      if (resBody.status === ResponseStatus.GOOD) {\n        const newNoteId = resBody.value;\n        alert(\"Nota creata correttamente!\");\n\n        // redirect to update page of the created note\n        nav(`/notes/${newNoteId}`);\n      } else {\n        setMessage(\"Errore nell'inserimento della nota\");\n      }\n    } catch (e) {\n      setMessage(\"Impossibile raggiungere il server\");\n    }\n  }\n  async function handleUpdate(e) {\n    e.preventDefault();\n\n    // TODO: validate inputs (not empty, max length)\n    try {\n      const res = await fetch(`${SERVER_API}/notes/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(res);\n      const resBody = await res.json();\n      if (resBody.status === ResponseStatus.GOOD) {\n        alert(\"Nota modificata correttamente!\");\n        setNote(resBody.value);\n      } else {\n        setMessage(\"Errore nell'aggiornamento della nota\");\n      }\n    } catch (e) {\n      setMessage(\"Impossibile raggiungere il server\");\n    }\n  }\n  async function handleDelete(e) {\n    e.preventDefault();\n\n    // TODO: validate inputs (not empty, max length)\n    try {\n      const res = await fetch(`${SERVER_API}/notes/${id}`, {\n        method: \"DELETE\"\n      });\n      console.log(res);\n      const resBody = await res.json();\n      if (resBody.status === ResponseStatus.GOOD) {\n        alert(\"Nota cancellata correttamente!\");\n        nav(\"/notes\");\n      } else {\n        setMessage(\"Errore della cancellazione della nota\");\n      }\n    } catch (e) {\n      setMessage(\"Impossibile raggiungere il server\");\n    }\n  }\n  function addTag(e) {\n    e.preventDefault();\n    if (note.tags.includes(tag)) {\n      setMessage(\"Tag giÃ  presente nella lista\");\n      setTag(\"\");\n      return;\n    }\n    if (tag === \"\") {\n      setMessage(\"Tag vuota non valida\");\n      return;\n    }\n    setNote(prevNote => {\n      const newTags = [];\n      console.log(prevNote.tags);\n      for (const t of prevNote.tags) {\n        newTags.push(t);\n      }\n      newTags.push(tag);\n      return {\n        ...prevNote,\n        tags: newTags\n      };\n    });\n    setTag(() => {\n      return \"\";\n    });\n  }\n  function deleteTag(e, tag) {\n    e.preventDefault();\n    const tags = note.tags.filter(t => t !== tag);\n    setNote({\n      ...note,\n      tags\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-title\",\n      children: id === NEW ? \"Crea una nuova nota\" : \"Modifica nota\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: [\"Titolo\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"title\",\n          value: note.title,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: [\"Testo\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"text\",\n          value: note.text,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Tags\", /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"tag\",\n            value: tag,\n            onChange: e => {\n              setTag(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              margin: \"auto 0.5em\"\n            },\n            onClick: addTag,\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tags-container\",\n          children: note && note.tags && note.tags.map(tag => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tag-box\",\n            children: [tag, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"tag-delete\",\n              onClick: e => deleteTag(e, tag),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: \"#ffff00\"\n        },\n        onClick: id === NEW ? handleCreate : handleUpdate,\n        children: id === NEW ? \"Crea Nota\" : \"Aggiorna Nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }, this), id !== NEW && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: \"#ff0000\"\n        },\n        onClick: handleDelete,\n        children: \"Cancella Nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 4\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n_s(NotePage, \"2kyBDMaloVV5vYn7YFj1VAKRPBQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = NotePage;\nvar _c;\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","SERVER_API","ResponseStatus","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","baseNote","id","title","text","owner","tags","NEW","NotePage","_s","note","setNote","useState","tag","setTag","message","setMessage","nav","useEffect","fetch","then","res","json","data","status","GOOD","value","console","log","catch","handleChange","e","target","name","handleCreate","preventDefault","method","body","JSON","stringify","headers","resBody","newNoteId","alert","handleUpdate","handleDelete","addTag","includes","prevNote","newTags","t","push","deleteTag","filter","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","style","margin","onClick","map","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/alessioprato/Desktop/SELFIE/client/src/NotePage.tsx"],"sourcesContent":["import React from \"react\";\nimport { SERVER_API } from \"./params/params\";\nimport { ResponseBody } from \"./types/ResponseBody\";\nimport { ResponseStatus } from \"./types/ResponseStatus\";\nimport Note from \"./types/Note\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst baseNote: Note = {\n\tid: \"\",\n\ttitle: \"\",\n\ttext: \"\",\n\towner: \"\",\n\ttags: [],\n};\n\nconst NEW = \"new\";\n\nexport default function NotePage(): React.JSX.Element {\n\tconst { id } = useParams();\n\tconst [note, setNote] = React.useState(baseNote as Note);\n\tconst [tag, setTag] = React.useState(\"\");\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst nav = useNavigate();\n\n\t// On page load, get the note for the user\n\tReact.useEffect(() => {\n\t\tif (id !== NEW)\n\t\t\tfetch(`${SERVER_API}/notes/${id}`)\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tif (data.status === ResponseStatus.GOOD) {\n\t\t\t\t\t\tsetNote(data.value as Note);\n\t\t\t\t\t\tconsole.log(data.value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnav(\"/notes\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tsetMessage(\"Impossibile raggiungere il server\");\n\t\t\t\t\tnav(\"/notes\");\n\t\t\t\t});\n\t}, [id]);\n\n\tfunction handleChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void {\n\t\tsetNote({ ...note, [e.target.name]: e.target.value });\n\t}\n\n\tasync function handleCreate(e: React.MouseEvent<HTMLButtonElement>): Promise<void> {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tconst res = await fetch(`${SERVER_API}/notes`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(note),\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t});\n\n\t\t\tconst resBody = (await res.json()) as ResponseBody;\n\n\t\t\tif (resBody.status === ResponseStatus.GOOD) {\n\t\t\t\tconst newNoteId: string = resBody.value;\n\t\t\t\talert(\"Nota creata correttamente!\");\n\n\t\t\t\t// redirect to update page of the created note\n\t\t\t\tnav(`/notes/${newNoteId}`);\n\t\t\t} else {\n\t\t\t\tsetMessage(\"Errore nell'inserimento della nota\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetMessage(\"Impossibile raggiungere il server\");\n\t\t}\n\t}\n\n\tasync function handleUpdate(e: React.MouseEvent<HTMLButtonElement>): Promise<void> {\n\t\te.preventDefault();\n\n\t\t// TODO: validate inputs (not empty, max length)\n\t\ttry {\n\t\t\tconst res = await fetch(`${SERVER_API}/notes/${id}`, {\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\tbody: JSON.stringify(note),\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t});\n\n\t\t\tconsole.log(res);\n\t\t\tconst resBody = (await res.json()) as ResponseBody;\n\n\t\t\tif (resBody.status === ResponseStatus.GOOD) {\n\t\t\t\talert(\"Nota modificata correttamente!\");\n\n\t\t\t\tsetNote(resBody.value as Note);\n\t\t\t} else {\n\t\t\t\tsetMessage(\"Errore nell'aggiornamento della nota\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetMessage(\"Impossibile raggiungere il server\");\n\t\t}\n\t}\n\n\tasync function handleDelete(e: React.MouseEvent<HTMLButtonElement>): Promise<void> {\n\t\te.preventDefault();\n\n\t\t// TODO: validate inputs (not empty, max length)\n\t\ttry {\n\t\t\tconst res = await fetch(`${SERVER_API}/notes/${id}`, {\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t});\n\n\t\t\tconsole.log(res);\n\t\t\tconst resBody = (await res.json()) as ResponseBody;\n\n\t\t\tif (resBody.status === ResponseStatus.GOOD) {\n\t\t\t\talert(\"Nota cancellata correttamente!\");\n\t\t\t\tnav(\"/notes\");\n\t\t\t} else {\n\t\t\t\tsetMessage(\"Errore della cancellazione della nota\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetMessage(\"Impossibile raggiungere il server\");\n\t\t}\n\t}\n\n\tfunction addTag(e: React.MouseEvent<HTMLElement>): void {\n\t\te.preventDefault();\n\n\t\tif (note.tags.includes(tag)) {\n\t\t\tsetMessage(\"Tag giÃ  presente nella lista\");\n\t\t\tsetTag(\"\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (tag === \"\") {\n\t\t\tsetMessage(\"Tag vuota non valida\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetNote((prevNote) => {\n\t\t\tconst newTags: string[] = [];\n\t\t\tconsole.log(prevNote.tags);\n\n\t\t\tfor (const t of prevNote.tags) {\n\t\t\t\tnewTags.push(t);\n\t\t\t}\n\t\t\tnewTags.push(tag);\n\n\t\t\treturn { ...prevNote, tags: newTags };\n\t\t});\n\n\t\tsetTag(() => {\n\t\t\treturn \"\";\n\t\t});\n\t}\n\n\tfunction deleteTag(e: React.MouseEvent<HTMLElement>, tag: string): void {\n\t\te.preventDefault();\n\t\tconst tags = note.tags.filter((t) => t !== tag);\n\n\t\tsetNote({ ...note, tags });\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"page-title\">{id === NEW ? \"Crea una nuova nota\" : \"Modifica nota\"}</div>\n\t\t\t<div className=\"note-container\">\n\t\t\t\t<label htmlFor=\"title\">\n\t\t\t\t\tTitolo\n\t\t\t\t\t<input name=\"title\" value={note.title} onChange={handleChange} />\n\t\t\t\t</label>\n\t\t\t\t<label htmlFor=\"title\">\n\t\t\t\t\tTesto\n\t\t\t\t\t<textarea name=\"text\" value={note.text} onChange={handleChange} />\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\tTags\n\t\t\t\t\t<label htmlFor=\"title\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"tag\"\n\t\t\t\t\t\t\tvalue={tag}\n\t\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\t\t\t\t\t\t\tsetTag(e.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button style={{ margin: \"auto 0.5em\" }} onClick={addTag}>\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</label>\n\t\t\t\t\t<div className=\"tags-container\">\n\t\t\t\t\t\t{note &&\n\t\t\t\t\t\t\tnote.tags &&\n\t\t\t\t\t\t\tnote.tags.map((tag) => (\n\t\t\t\t\t\t\t\t<div className=\"tag-box\">\n\t\t\t\t\t\t\t\t\t{tag}\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tclassName=\"tag-delete\"\n\t\t\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLElement>): void =>\n\t\t\t\t\t\t\t\t\t\t\tdeleteTag(e, tag)\n\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</label>\n\t\t\t\t<button\n\t\t\t\t\tstyle={{ backgroundColor: \"#ffff00\" }}\n\t\t\t\t\tonClick={id === NEW ? handleCreate : handleUpdate}>\n\t\t\t\t\t{id === NEW ? \"Crea Nota\" : \"Aggiorna Nota\"}\n\t\t\t\t</button>\n\t\t\t\t{id !== NEW && (\n\t\t\t\t\t<button style={{ backgroundColor: \"#ff0000\" }} onClick={handleDelete}>\n\t\t\t\t\t\tCancella Nota\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{message && <div>{message}</div>}\n\t\t</>\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}